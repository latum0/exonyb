generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
}

enum Permission {
  AGENT_DE_STOCK
  CONFIRMATEUR
  SAV
}

enum ClientStatut {
  ACTIVE
  BLACKLISTED
}

model Users {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  password      String
  name          String
  role          Role
  permissions   Json?
  phone         String   @unique
  refreshToken  String?
  emailVerified Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  historiques Historique[]
}

model Historique {
  idHistorique      Int      @id @default(autoincrement())
  dateModification  DateTime
  descriptionAction String
  acteur            String?

  utilisateurId Int
  utilisateur   Users @relation(fields: [utilisateurId], references: [id])
}

model Client {
  idClient        Int          @id @default(autoincrement())
  nom             String
  prenom          String
  adresse         String
  email           String       @unique
  numeroTelephone String       @unique
  statut          ClientStatut @default(ACTIVE)
  dateCreated     DateTime     @default(now())

  commentaires Commentaire[]
  commandes    Commande[]

  @@index([statut, nom, idClient])
  @@index([nom])
  @@index([numeroTelephone])
}

model Commentaire {
  id          Int      @id @default(autoincrement())
  contenu     String
  dateCreated DateTime @default(now())

  clientId Int
  client   Client @relation(fields: [clientId], references: [idClient], onDelete: Cascade)
}

model Commande {
  idCommande String @id @default(uuid())

  dateCommande     DateTime @default(now())
  statut           String
  adresseLivraison String
  montantTotal     Decimal  @db.Decimal(12, 2)

  client   Client @relation(fields: [clientId], references: [idClient], onDelete: Cascade)
  clientId Int

  lignesCommande LigneCommande[]
  retour         Retour?

  @@index([clientId])
  @@index([dateCommande])
}

model LigneCommande {
  idLigne      Int     @id @default(autoincrement())
  quantite     Int
  prixUnitaire Decimal @db.Decimal(10, 2)

  commande   Commande @relation(fields: [commandeId], references: [idCommande], onDelete: Cascade)
  commandeId String

  produit   Produit @relation(fields: [produitId], references: [idProduit])
  produitId String

  @@unique([commandeId, produitId])
  @@index([commandeId])
  @@index([produitId])
}

model Produit {
  idProduit   String @id @default(uuid())
  nom         String
  description String @db.Text
  prix        Float
  stock       Int
  remise      Float
  marque      String
  images      Json
  categorie   String
  qrCode      String @unique

  lignesCommande LigneCommande[]
  fournisseurs   Fournisseur[]   @relation("FournisseurProduit")

  Notification Notification[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Fournisseur {
  idFournisseur Int    @id @default(autoincrement())
  nom           String
  adresse       String
  contact       String
  telephone     String @unique
  email         String @unique

  produits Produit[] @relation("FournisseurProduit")
}

model Retour {
  idRetour     Int      @id @default(autoincrement())
  dateRetour   DateTime
  statutRetour String
  raisonRetour String

  commandeId String @unique

  commande Commande @relation(fields: [commandeId], references: [idCommande], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(uuid())
  produitId String
  type      String // e.g. "OUT_OF_STOCK" | "LOW_STOCK"
  message   String
  createdAt DateTime @default(now())
  resolved  Boolean  @default(false)

  produit Produit @relation(fields: [produitId], references: [idProduit], onDelete: Cascade)

  @@unique([produitId, type])
  @@index([produitId, resolved])
}
